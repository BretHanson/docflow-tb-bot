import {Scenes, session, Composer, Markup} from "telegraf";
import { logger, prisma } from "../../index.js";

import { sleep } from "../../util/common.js";
import { getMainKeyboard, getLestGoKeyboardInline } from '../../util/keyboard.js'

import emailValidator from "../../util/emailValidator.js";
import emailSender from "../../util/emailSender.js";

const WizardScene = Scenes.WizardScene;

const generateCode = () => {
    return Math.floor(Math.random() * 10000);
};

const { letsGoKeyboard } = getLestGoKeyboardInline();

const messageCode = (email, emailCode) => {
    return {
        from: '"–ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥—Ä–µ–π" <onezxro@yandex.ru>',
        to: email,
        subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥—Ä–µ–π"',
        html: `
                    <h2>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è : ${emailCode}</h2>
                    `
    }
};

const start = new WizardScene('start',
    async (ctx) => {
        const uid = ctx.message.from.id;
        const userId = await prisma.users.findUnique({ where:{ uid: uid } });
        const { mainKeyboard } = getMainKeyboard();
        const { letsGoKeyboard } = getLestGoKeyboardInline();

        if (userId) {
            await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã! –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?`, mainKeyboard);
            logger.info(`User with id:${uid} successfully connected`);
            await ctx.scene.leave();
        } else {
            await ctx.reply(`üßê –•–º.. –í–∏–¥–∏–º–æ —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
            await sleep(2);
            await ctx.reply(`–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!üòä\n`);
            await ctx.reply(`‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email-–∞–¥—Ä–µ—Å –∏ —è –≤—ã—à–ª—é —Ç–µ–±–µ –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –¥–æ–º–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–ø–∞–Ω–∏–∏`);
            return ctx.wizard.next();
        }
    },
      async (ctx) => {
        ctx.wizard.state.email = ctx.message.text;
        const email = ctx.wizard.state.email
        const emailValidate = emailValidator(email);
        console.log(emailValidate);
        if (emailValidate) {
            ctx.wizard.state.emailCode = generateCode();
            const emailMessage = messageCode(ctx.wizard.state.email,ctx.wizard.state.emailCode)
            const sendEmailCode= await emailSender(emailMessage);
            console.log(sendEmailCode);
            if (sendEmailCode) {
                await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–≤–æ—é –ø–æ—á—Ç—É, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ`, Markup.inlineKeyboard(
                    [
                        Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ', 'resend_code'),
                        Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å email –∞–¥—Ä–µ—Å', 'change_email')
                    ]
                ));
                return ctx.wizard.next();
            } else {
                await ctx.reply(`–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
            }
        } else {
            await ctx.reply('Email –Ω–µ–≤–µ—Ä–Ω—ã–π')
        }
    },
     async (ctx) => {
        if (ctx.wizard.state.emailCode === parseInt(ctx.message.text)) {
            await prisma.users.create({
                data: {
                    uid: ctx.message.from.id,
                    username: ctx.message.from.username,
                    first_name: ctx.message.from.first_name,
                    last_name: ctx.message.from.last_name,
                    roles: 1,
                    email: ctx.wizard.state.email,
                    isverified: false,
                    last_activity: new Date(),
                }
            });
            logger.debug('New user load : %d', ctx.message.from.id);
            await ctx.reply(`–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ —è —Ç–∞–∫–∞—è –∏ –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å üòä`);
            await sleep(3);
            await ctx.reply('–ú–µ–Ω—è –∑–æ–≤—É—Ç Docflow Bot, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –° –ø–æ–º–æ—â—å—é –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–∏ –∏–Ω—Ç—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–∫–∞—á–∞–π –µ–≥–æ –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n\n‚ùóÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ—é –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –¢–µ–ª–µ–≥—Ä–∞–º–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É\n\n‚ùóÔ∏è –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–∞–ø–∏—à–∏ –º–Ω–µ /repair –∏ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –≤—Å–µ –ø–æ—á–∏–Ω–∏—Ç—å\n\n‚ùóÔ∏è –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Å–µ–∫—Ü–∏–∏ ‚ùì –û–±–æ –º–Ω–µ\n\n',
                letsGoKeyboard
            );
            return ctx.wizard.next();
        } else {
            await ctx.reply(`–ö–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.`);
            console.log('–ö–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ ');
        }
    },
);

start.leave(async (ctx) => {
    const { mainKeyboard } = getMainKeyboard();
    await ctx.reply('‚úã –ù—É –ø—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', mainKeyboard);
});

start.action(/resend_code/, async (ctx) => {
    await ctx.answerCbQuery();
    const repairEmailMessage = messageCode(ctx.wizard.state.email,ctx.wizard.state.emailCode)
    const repairSendEmailCode= await emailSender(repairEmailMessage);
    if (repairSendEmailCode) {
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É.');
    } else {
        await ctx.reply(`–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
    }

});

start.action(/lets_go/, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.leave();
});

export default start;
