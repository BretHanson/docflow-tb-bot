import { Scenes, session } from "telegraf";
import { logger, prisma } from "../../index.js";
import emailValidator from "../../util/emailValidator.js";
import nodemailer from 'nodemailer';

import { sleep } from "../../util/common.js";
import { getMainKeyboard, getLestGoKeyboardInline } from '../../util/keyboard.js'

const Base = Scenes.BaseScene;
const start = new Base("start");

const generateCode = () => {
    return Math.floor(Math.random() * 10000);
};
const codeMailer = String(generateCode());


start.enter(async (ctx) => {
    const uid = ctx.message.from.id;
    const userId = await prisma.users.findUnique({ where:{ uid: uid } });
    const { mainKeyboard } = getMainKeyboard();
    const { letsGoKeyboard } = getLestGoKeyboardInline();

    if (userId) {
        await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã! –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?`, mainKeyboard);
        logger.info(`User with id:${uid} successfully connected`);
        await ctx.scene.leave();
    } else {
        await ctx.reply(`üßê –•–º.. –í–∏–¥–∏–º–æ —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
        await sleep(2);
        await  ctx.reply(`–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!üòä\n‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email-–∞–¥—Ä–µ—Å –∏ —è –≤—ã—à–ª—é —Ç–µ–±–µ –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –¥–æ–º–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–ø–∞–Ω–∏–∏`);
    }
});

start.on(/\s/, async (ctx) => {

    const emailValidate = emailValidator(ctx.message.text);

    const sessionEmail = ctx.session.email;
    //sessionEmail = String(emailValidate);
    console.log(sessionEmail)







    if (emailValidate) {
        transporter.sendMail({
            from: '"–ß–∞—Ç-–±–æ—Ç –ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥—Ä–µ–π" <onezxro@yandex.ru>',
            to: 'acerhome74@gmail.com',
            subject: 'Code',
            text: `${ctx.message.from.username}, –≤–∞—à –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ:${codeMailer}`
        }, (error, info) => {
            if (error) {
                console.log(error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
            } else {
                console.log(info.response);
                ctx.session.codeLogin = codeMailer;
                ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ù–∞ —Ç–≤–æ–π email –∞–¥—Ä–µ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);
            }
        });
    } else {
        await ctx.reply(`–û–π! –¢–≤–æ–π email –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
    }

    if (ctx.session.emailValidate === 'true') {
        if (ctx.message.text === ctx.session.codeLogin) {
        console.log(codeMailer);
        console.log(ctx.message.text);
        ctx.reply('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        await ctx.scene.leave();
    } else {
        ctx.reply('–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        console.log(codeMailer);
        console.log(ctx.message.text);
    }
    } else {

    }


});

start.leave(async (ctx) => {
    const { mainKeyboard } = getMainKeyboard();
    await ctx.reply('‚úã –ù—É –ø—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', mainKeyboard);
});

start.command('sendcode', async (ctx) => {

});

start.action(/lets_go/, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.leave();
});
export default start;

